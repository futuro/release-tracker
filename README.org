* Justenough Software Release Tracker
  This repo allows tracking the release status of various public
  projects on Github, to make keeping up with new releases easier.
** How to run the server
   To run the server, first ensure you've got clojure installed on
   your machine.

   Then set up a personal github OAuth token in
   ~resources/config/secrets.edn~. This file is not tracked by github,
   and should have the following structure:
   #+begin_src clojure
     {:github/auth {:user/token "YOUR TOKEN HERE"}}
   #+end_src

   Finally, run ~clojure -M:server~.

   Once it's started, you can interact with it via your favorite HTTP
   client.

   There is also an experimental UI portion to this project, which you can
   read more about at [[* Experimental namespaces]]. The given command
   above does not meaningfully tie into the UI 
** TODO Endpoints
** TODO Namespaces of primary consideration
** TODO Experimental namespaces
** Misc
*** MVP User Stories
**** DONE Users can add GitHub repos they want to track
     The app keeps track of the added repos -- using
     LocalStorage/IndexedDB or similar, no need for a backend -- until
     the application data is cleared.
***** DONE repo searching
****** DONE The actual searching
       This is complete
****** DONE Displaying the results
       I've got a barebones display that just shows the name of the
       repo.

       This looks pretty ugly atm, so pulling in semantic UI might be
       nice, and also save me any UI tweaking
***** DONE a list of repos we're following
***** DONE a way to add from the search results
**** DONE Users can see the latest release date for each repo
**** DONE Users can mark a release as seen
**** TODO There's a visual indicator for repositories with new releases
     New since they were last marked seen
**** DONE There is a way to reload release data for all repos
     This one needs some clarification what "reload" means. I /suspect/
     it's "pull the release data from ghub", but I want to make sure it
     isn't "clear the _seen_ state".
**** TODO update README with instructions on running the project
     This wasn't part of the MVP section in the email, but I find it
     meaningful anyways. Also, it'll fill in for the requirements
     around having docs on running the project.
**** No need for formal user or authentication concept at this point
*** Helpful links
    - [[https://developer.github.com/v3/libraries/][Octokit libraries for working with the GitHub API]]
    - [[https://docs.github.com/en/free-pro-team@latest/graphql/reference/objects#release][GitHub releases API]]
    - [[https://docs.github.com/en/rest/reference/search][GitHub search API]]
    - [[https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage][LocalStorage MDN Docs]]
    - [[https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API][IndexedDB MDN Docs]]
*** Optional goals past MVP
**** Release notes/other data we might want to present in a details view
**** Mobile responsive?
**** When to load/update data, what loading states should there be
**** Filter or sort the repo list
     To easily see which repos have new releases since last we marked
     them seen.
**** Additional personal metadata
     F.e. the ability to mark a release as something to revisit, or as
     something to update in other projects
**** Support more data points to mark new releases
     Some projects don't use GitHub releases, so support some other
     data points for marking new releases; perhaps commit activity.
**** Desktop/mobile notifications
     This seems somewhat vague, so it probably needs a collab session
     with Tom to sort out what this means.

     Alternatively, it's not vague to someone that's done more frontend
     work, but it'll still require a collab session with Tom.
**** Add a backend to this service
     This is worded as such:
     #+begin_quote
     How would you build a real server for this / turn this into a
     service that would store data beyond the local browser?
     #+end_quote

     From this, I could see either an RFC-style kind of proposal that
     talks about the "how" without actually building it, but it might
     also build it out.
***** OAuth
      Personally, I think it'd be neat to sort out OAuth with this, so
      that we could get access to larger API request limits, as well as
      private repos, but perhaps that's another goal altogether.
